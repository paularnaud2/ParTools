--Recherche en archive (attention archives non indexé sur PDL) partition sur EDI_D_CREATION
SELECT * 
FROM C5_ARC.CE12_ARC
WHERE T_IDPDL = '19380752434029'
AND EDI_D_CREATION > TO_DATE('05/04/2012', 'dd/mm/yyyy')
AND EDI_D_CREATION < TO_DATE('05/06/2012', 'dd/mm/yyyy')
;

--Recherche de PDLs avec critères sur les index
SELECT EDI_D_CREATION, T_IDPDL, CE12_N_VAIND1, CE12_N_VAIND2
FROM C5.CE12
WHERE T_IDPDL LIKE '015%'
AND K_FRN = 'ACM_140'
AND CE12_N_VAIND1 < 10000
AND CE12_N_VAIND2 < 10000
AND CE12_T_NBIC = 2
AND EDI_D_CREATION > to_date('01/10/14');

-------------------------------------------Notifs d'evt long à insérer dans la table NOTIF de BC5_EAI-----------------------------------
SELECT * FROM C5.EME_LG_AVA_PRS evt
JOIN C5.NOTIF_FIN_TRT notif ON notif.NFT_ID = evt.NFT_ID
WHERE  1=1
AND EME_C_CODE = 'PRS_REAL'
--AND EME_C_PRB = 'PRB_PMES'
--AND EME_T_BPCOM1 = 'SOLERIEUX'
;

DECLARE
    notif VARCHAR2(14) := '205752423';

BEGIN

    UPDATE C5.NOTIF_FIN_TRT
    SET NFT_B_STATUT_SAF = null,
    NFT_B_STATUT_PDM = null,
    NFT_T_CODE_ERREUR_SAF = null,
    NFT_T_CODE_ERREUR_PDM = null,
    NFT_B_STATUT_TUBE = null,
    NFT_T_CODE_ERREUR_TUBE = null
    WHERE NFT_ID = notif;
    
    INSERT INTO EAI_C5.NOTIF NFT_ID VALUES (notif);
    
COMMIT;

END;

-----------------------------------------------------Vérifs MEP------------------------------------------------------------
--Erreur générées lors de la nuit applicative
SELECT DISTINCT COUNT(1), eav.EAV_C_CODE, rer.RER_T_LIBELLE
FROM C5.ERR_AVE eav
JOIN C5.REF_ERR rer ON rer.RER_C_CODE = eav.EAV_C_CODE
WHERE eav.EAV_D_CREATION > (SELECT TRUNC(MAX(NFT_D_CREATION)) FROM C5.NOTIF_FIN_TRT )
GROUP BY eav.EAV_C_CODE, rer.RER_T_LIBELLE ORDER BY COUNT(1) DESC
;

--NOTIFS_FIN_TRT
SELECT COUNT(*), notif.NFT_B_STATUT_SAF, notif.NFT_B_STATUT_TUBE,  notif.NFT_T_CODE_ERREUR_SAF, notif.NFT_T_CODE_ERREUR_TUBE
FROM C5.NOTIF_FIN_TRT notif
WHERE TRUNC(notif.NFT_D_CREATION) > (SELECT TRUNC(MAX(NFT_D_CREATION)) FROM C5.NOTIF_FIN_TRT )-1
GROUP BY notif.NFT_B_STATUT_SAF, notif.NFT_T_CODE_ERREUR_SAF, notif.NFT_B_STATUT_TUBE, notif.NFT_T_CODE_ERREUR_TUBE
ORDER BY 1 DESC
;

--Affaires clôturées automatiquement
SELECT EME_T_NDOSSIER as RES
FROM C5.EME_LG_AVA_PRS
WHERE EME_T_NDOSSIER IS NOT NULL
AND NFT_ID IN (SELECT NFT_ID
FROM C5.NOTIF_FIN_TRT
WHERE NFT_B_STATUT_SAF = 'OK'
AND TRUNC(NFT_D_CREATION) =  '31/05/2016')
;

-------------------------------------------------------------------


--Volumétrie affaires cloturées par prestation---------------------
SELECT COUNT(*) as NB, PRS_C_CODE, POP_C_CODE, MAX(EME_T_NDOSSIER)
FROM C5.EME_LG_AVA_PRS eme
JOIN C5.K_AFFAIRE aff ON aff.AFF_T_DISCO = eme.EME_T_NDOSSIER
WHERE EME_T_NDOSSIER IS NOT NULL
AND NFT_ID IN (SELECT NFT_ID
FROM C5.NOTIF_FIN_TRT
WHERE NFT_B_STATUT_SAF = 'OK'
AND NFT_D_CREATION >  '13/06/2015') GROUP BY PRS_C_CODE, POP_C_CODE
ORDER BY PRS_C_CODE, POP_C_CODE
;

-----------Version BC5---------------
SELECT * FROM C5.VERSION_APPLICATION
ORDER BY DATE_INSTALLATION DESC
;

------Volumétrie rejets--------------
SELECT DISTINCT COUNT(*), TRUNC(EAV_D_CREATION) as EAV_D
FROM C5.ERR_AVE
WHERE EAV_C_CODE LIKE 'REJ150'
--AND T_CCD = '056'
GROUP BY TRUNC(EAV_D_CREATION)
ORDER BY EAV_D DESC
;

--Check rapide génération evt + notifs
--Evènements
SELECT EME_T_NDOSSIER FROM EME_LG_AVA_PRS
WHERE EME_T_NDOSSIER IS NOT NULL
ORDER BY EME_D_CREATION DESC
;

--Notifications fin de traitement
SELECT * FROM NOTIF_FIN_TRT
WHERE NFT_B_STATUT_SAF <> 'NA'
ORDER BY NFT_D_CREATION DESC
;

--Log activité
SELECT * FROM LOG_ACTIVITE
ORDER BY LOG_DATE DESC
;

-----------------------------------Purge BASE C5----------------------------------------------
--Purge entrants / sortants C5
TRUNCATE TABLE C5.NOTIF_FIN_TRT;
TRUNCATE TABLE C5.ERR_AVE;
TRUNCATE TABLE C5.CE12;
TRUNCATE TABLE C5.CE20;
TRUNCATE TABLE C5.CE21;
TRUNCATE TABLE C5.EME_LG_AVA_PRS;
TRUNCATE TABLE C5.EME_CRT_AVA_PRS;

--Purge SAS_C5
DECLARE

TYPE TABLE_NAME       IS TABLE OF ALL_TABLES.TABLE_NAME%TYPE;
TABLE_NAME_VAR TABLE_NAME;

BEGIN
  
  SELECT ALL_TABLES.TABLE_NAME
  BULK COLLECT
  INTO TABLE_NAME_VAR
  FROM ALL_TABLES
  WHERE OWNER = 'SAS_C5'
  AND (TABLE_NAME LIKE 'CE%'
      OR TABLE_NAME LIKE 'CR_AUT%'
	  OR TABLE_NAME LIKE 'REABRA%')
  AND TABLE_NAME NOT LIKE '%EXT%'
  ORDER BY 1
  ;
  
  FOR i IN 1..TABLE_NAME_VAR.COUNT LOOP
    EXECUTE IMMEDIATE CONCAT('TRUNCATE TABLE SAS_C5.', TABLE_NAME_VAR(i));
    DBMS_OUTPUT.PUT_LINE(CONCAT('Vidage de la table ', TABLE_NAME_VAR(i)));
  END LOOP;

END;

--Purge du user C5 (avec conservation de l'historique)
DECLARE

TYPE TABLE_NAME       IS TABLE OF ALL_TABLES.TABLE_NAME%TYPE;
TABLE_NAME_VAR TABLE_NAME;

BEGIN
  
  SELECT ALL_TABLES.TABLE_NAME
  BULK COLLECT
  INTO TABLE_NAME_VAR
  FROM ALL_TABLES
  WHERE OWNER = 'C5'
  AND (TABLE_NAME LIKE '%ARCHIVE%'
      OR TABLE_NAME LIKE '%ECHANGE%')
  AND TABLE_NAME NOT LIKE '%EXT%'
  ORDER BY 1
  ;
  
  FOR i IN 1..TABLE_NAME_VAR.COUNT LOOP
    EXECUTE IMMEDIATE CONCAT('TRUNCATE TABLE C5.', TABLE_NAME_VAR(i));
    DBMS_OUTPUT.PUT_LINE(CONCAT('Vidage de la table ', TABLE_NAME_VAR(i)));
  END LOOP;

END;

--Purge du user C5 (sans conservation de l'historique)
DECLARE

TYPE TABLE_NAME       IS TABLE OF ALL_TABLES.TABLE_NAME%TYPE;
TABLE_NAME_VAR TABLE_NAME;

BEGIN
  
  SELECT ALL_TABLES.TABLE_NAME
  BULK COLLECT
  INTO TABLE_NAME_VAR
  FROM ALL_TABLES
  WHERE OWNER = 'C5'
  AND (TABLE_NAME LIKE 'BRANCH%'
        OR TABLE_NAME LIKE 'CE%'
        OR TABLE_NAME LIKE 'CORPS_JME_%'
        OR TABLE_NAME LIKE 'CR_AUT%'
        OR TABLE_NAME LIKE 'EME_%'
        OR TABLE_NAME LIKE 'ERR_AVE%'
        OR TABLE_NAME LIKE 'GPRS_ARCH%'
        OR TABLE_NAME LIKE 'LISTE_PDL%'
        OR TABLE_NAME LIKE 'LOG_ACTIVITE%'
        OR TABLE_NAME LIKE 'NOTIF%'
        OR TABLE_NAME LIKE 'PBOX_%'
        OR TABLE_NAME LIKE 'PHASE_JME%'
        OR TABLE_NAME LIKE 'REABRA%'
        OR TABLE_NAME LIKE 'STATISTIQUE%'
        OR TABLE_NAME LIKE 'TRACE_FIC%')
  AND TABLE_NAME NOT LIKE '%EXT%'
  ORDER BY 1
  ;
  
  FOR i IN 1..TABLE_NAME_VAR.COUNT LOOP
    EXECUTE IMMEDIATE CONCAT('TRUNCATE TABLE C5.', TABLE_NAME_VAR(i));
    DBMS_OUTPUT.PUT_LINE(CONCAT('Vidage de la table ', TABLE_NAME_VAR(i)));
  END LOOP;

END;

--Puis lancer les requêtes suivantes :
DELETE FROM C5.CORPS_JME; --Peut prendre très longtemps !


--Effacement des données d'un PDL (Sans K_AFFAIRE)
DECLARE
  --PDL concerné
  pdl VARCHAR2(14) := '01500144622871';
  
BEGIN

  DELETE FROM C5.PHASE_JME WHERE PHA_ID IN ( SELECT PHA_ID FROM C5.PHASE_JME pha
                                              LEFT JOIN C5.CORPS_JME cor ON cor.COR_ID = pha.COR_ID
                                              LEFT JOIN C5.PBOX pbo ON pbo.PBO_ID = cor.PBO_ID
                                              LEFT JOIN C5.GPRS gprs ON gprs.GPRS_ID = pbo.GPRS_ID
                                              WHERE T_IDPDL = pdl);
  
  DELETE FROM C5.CORPS_JME WHERE COR_ID IN ( SELECT COR_ID FROM C5.CORPS_JME cor
                                              LEFT JOIN C5.PBOX pbo ON pbo.PBO_ID = cor.PBO_ID
                                              LEFT JOIN C5.GPRS gprs ON gprs.GPRS_ID = pbo.GPRS_ID
                                              WHERE T_IDPDL = pdl);
  
  DELETE FROM C5.PBOX WHERE PBO_ID IN ( SELECT PBO_ID FROM C5.PBOX pbo
                                        LEFT JOIN C5.GPRS gprs ON gprs.GPRS_ID = pbo.GPRS_ID
                                        WHERE T_IDPDL = pdl);
                                        
  DELETE FROM C5.CE12 WHERE T_IDPDL = pdl;
  DELETE FROM C5.CE20 WHERE T_IDPDL = pdl;
  DELETE FROM C5.CR_AUT_513A WHERE T_IDPDL = pdl;
  DELETE FROM C5.CR_AUT_604A WHERE T_IDPDL = pdl;
  
  DELETE FROM C5.GPRS WHERE GPRS_ID IN ( SELECT GPRS_ID FROM C5.GPRS
                                            WHERE T_IDPDL = pdl);
  
  DELETE FROM C5.EME_CRT_AVA_PRS WHERE EME_T_PDL = pdl;
  DELETE FROM C5.EME_LG_AVA_PRS WHERE EME_T_PDL = pdl;
  
  DELETE FROM C5.ERR_AVE WHERE T_IDPDL = pdl;
  DELETE FROM C5.NOTIF_FIN_TRT WHERE T_IDPDL = pdl;
  
COMMIT;

END;

--Check effacement données---------------------
SELECT * FROM CE12;
SELECT * FROM CE20;
SELECT * FROM PHASE_JME;
SELECT * FROM CORPS_JME;
SELECT * FROM PBOX;
SELECT * FROM GPRS;
SELECT * FROM ERR_AVE;
SELECT * FROM EME_LG_AVA_PRS;
SELECT * FROM EME_CRT_AVA_PRS;

----------Check DBLINK--------------------------(A lancer avec le user C5)
SELECT PDM_ID FROM C5_K_AFFAIRE@DBLINK_SAF;

----------------------------MAJ SEQ TRAFIC--(A lancer sur  base TRAFIC FWK)
---Statut-------------------
SELECT * FROM FMK_SEQUENCE
WHERE ID_SEQUENCE like 'DISNAT_ID_015%'
--AND STATUT = 'KO'
;

--Réglage No de séquence--
UPDATE FMK_SEQUENCE
SET CURR_SEQUENCE = 4521, STATUT = 'OK'
WHERE ID_SEQUENCE LIKE 'DISNAT_ID_015%'
;

--Monitoring--
SELECT COUNT(*), STATUT, CURR_SEQUENCE FROM FMK_SEQUENCE
WHERE
ID_SEQUENCE like 'DISNAT_ID_%'
GROUP BY STATUT, CURR_SEQUENCE
;

--Check ordonnancement (en cas de non polling)
SELECT * FROM FMK_ORDONNANCEMENT
WHERE CODE_FLUX_ENTRANT LIKE '%C05%'
AND STATUT <> 'OK'
ORDER BY DATE_MAJ DESC;

--Remise à OK
UPDATE FMK_ORDONNANCEMENT SET STATUT = 'OK'
WHERE CODE_FLUX_ENTRANT LIKE '%C05%'
AND STATUT <> 'OK'
;

--En cas de polling C05 KO, regarder aussi
SELECT * FROM FMK_ORDONNANCEMENT
WHERE CODE_FLUX_ENTRANT LIKE '%C05%'
AND STATUT <> 'OK'
--AND CODE_CENTRE LIKE '234'
;

UPDATE FMK_ORDONNANCEMENT
SET STATUT = 'OK'
WHERE CODE_FLUX_ENTRANT LIKE '%C05%'
;

-----------------------------------------------------------------------------------------------------------

--Insertion à ajouter dans REGLE_METIER
SELECT * FROM C5.REGLE_METIER WHERE NO_REGLE = '200' ORDER BY PRIO_REGLE;
--200, T8, 50
INSERT INTO C5.REGLE_METIER (NO_REGLE, RME_D_DEBUT, RME_D_FIN, RME_C_CIN, PRB_C_CODE, PBO_C_DEM_STATUT, PBO_C_READEM, PBO_B_DEM_MOD, RME_T_PHA_REF, RME_T_PHA_PRES1, RME_T_PHA_PRES2, RME_T_PHA_ABST1, RME_T_PHA_ABST2, RME_B_AFF, RME_T_PHA_REAL, RME_C_EVT, RME_T_FCT_EVT, RME_T_FCT_ERR, RME_B_FIN_PBO, RME_T_PROPART, PRIO_REGLE) VALUES (200, TO_DATE('04/15/2011', 'MM/DD/YYYY'), TO_DATE('12/31/9999', 'MM/DD/YYYY'), 1, 'PRB_COUP', '0', NULL, NULL, '163PL_______', '133T8_______', '11150_______', NULL, NULL, '0', '133T8_______', 'PRS_RST', 'EVT#02', NULL, 2, 1, 1);
--200, T7, 50
INSERT INTO C5.REGLE_METIER (NO_REGLE, RME_D_DEBUT, RME_D_FIN, RME_C_CIN, PRB_C_CODE, PBO_C_DEM_STATUT, PBO_C_READEM, PBO_B_DEM_MOD, RME_T_PHA_REF, RME_T_PHA_PRES1, RME_T_PHA_PRES2, RME_T_PHA_ABST1, RME_T_PHA_ABST2, RME_B_AFF, RME_T_PHA_REAL, RME_C_EVT, RME_T_FCT_EVT, RME_T_FCT_ERR, RME_B_FIN_PBO, RME_T_PROPART, PRIO_REGLE) VALUES (200, TO_DATE('04/15/2011', 'MM/DD/YYYY'), TO_DATE('12/31/9999', 'MM/DD/YYYY'), 1, 'PRB_COUP', '0', NULL, NULL, '163PL_______', '133T7_______', '11150_______', NULL, NULL, '0', '133T8_______', 'PRS_RST', 'EVT#02', NULL, 2, 1, 1);
--200, T8
INSERT INTO C5.REGLE_METIER (NO_REGLE, RME_D_DEBUT, RME_D_FIN, RME_C_CIN, PRB_C_CODE, PBO_C_DEM_STATUT, PBO_C_READEM, PBO_B_DEM_MOD, RME_T_PHA_REF, RME_T_PHA_PRES1, RME_T_PHA_PRES2, RME_T_PHA_ABST1, RME_T_PHA_ABST2, RME_B_AFF, RME_T_PHA_REAL, RME_C_EVT, RME_T_FCT_EVT, RME_T_FCT_ERR, RME_B_FIN_PBO, RME_T_PROPART, PRIO_REGLE) VALUES (200, TO_DATE('04/15/2011', 'MM/DD/YYYY'), TO_DATE('12/31/9999', 'MM/DD/YYYY'), 1, 'PRB_COUP', '0', NULL, NULL, '163PL_______', '133T8_______', NULL, NULL, NULL, '0', '133T8_______', 'POSE_LIM', 'EVT#02', NULL, 2, 1, 2);
--200, T7
INSERT INTO C5.REGLE_METIER (NO_REGLE, RME_D_DEBUT, RME_D_FIN, RME_C_CIN, PRB_C_CODE, PBO_C_DEM_STATUT, PBO_C_READEM, PBO_B_DEM_MOD, RME_T_PHA_REF, RME_T_PHA_PRES1, RME_T_PHA_PRES2, RME_T_PHA_ABST1, RME_T_PHA_ABST2, RME_B_AFF, RME_T_PHA_REAL, RME_C_EVT, RME_T_FCT_EVT, RME_T_FCT_ERR, RME_B_FIN_PBO, RME_T_PROPART, PRIO_REGLE) VALUES (200, TO_DATE('04/15/2011', 'MM/DD/YYYY'), TO_DATE('12/31/9999', 'MM/DD/YYYY'), 1, 'PRB_COUP', '0', NULL, NULL, '163PL_______', '133T7_______', NULL, NULL, NULL, '0', '133T7_______', 'POSE_LIM', 'EVT#02', NULL, 2, 1, 2);

--Check règles métier
SELECT * FROM C5.REGLE_METIER
WHERE NO_REGLE LIKE '20%'
AND NO_REGLE NOT LIKE '20'
ORDER BY NO_REGLE, PRIO_REGLE, RME_T_PHA_PRES2, RME_T_PHA_PRES1
;

-----------------------------------Analyse rejeux---------------------------------------------------------
--CE12
SELECT DISTINCT COUNT(*), EDI_B_FLAG, TRUNC(EDI_D_CREATION) FROM C5.CE12 WHERE EDI_D_CREATION > '20/05/15' GROUP BY EDI_B_FLAG, TRUNC(EDI_D_CREATION) ORDER BY TRUNC(EDI_D_CREATION) DESC, EDI_B_FLAG
--CE20
SELECT DISTINCT COUNT(*), EDI_B_FLAG, TRUNC(EDI_D_CREATION) FROM C5.CE20 WHERE EDI_D_CREATION > '20/05/15' GROUP BY EDI_B_FLAG, TRUNC(EDI_D_CREATION) ORDER BY TRUNC(EDI_D_CREATION) DESC, EDI_B_FLAG
--CR_AUT_513A
SELECT DISTINCT COUNT(*), EDI_B_FLAG, TRUNC(EDI_D_CREATION) FROM C5.CR_AUT_513A WHERE EDI_D_CREATION > '20/05/15' GROUP BY EDI_B_FLAG, TRUNC(EDI_D_CREATION) ORDER BY TRUNC(EDI_D_CREATION) DESC, EDI_B_FLAG
--CR_AUT_604A
SELECT DISTINCT COUNT(*), EDI_B_FLAG, TRUNC(EDI_D_CREATION) FROM C5.CR_AUT_604A WHERE EDI_D_CREATION > '20/05/15' GROUP BY EDI_B_FLAG, TRUNC(EDI_D_CREATION) ORDER BY TRUNC(EDI_D_CREATION) DESC, EDI_B_FLAG

select column_name col_name, substr(column_name, 6) flag
from all_tab_columns
where table_name = 'TMP_COUNT_FLAG'
and column_name like 'FLAG%'
;

---CONF JDBC TRAFIC en base
SELECT * FROM T_REF_MODE_ACH refmod
JOIN T_REF_MEDIA_ACH refmedia ON refmod.ID_MEDIA_ACH = refmedia.ID_MEDIA_ACH
WHERE refmod.ID_MODE_ACH = 2571
;

--------------------------Rattrapage notifications C03 TRAFIC (EAI)-----------------------------
	--Modification evt
	SELECT * FROM EME_CRT_AVA_PRS
	WHERE EME_T_NDOSSIER IS NOT NULL
	;

	UPDATE EME_CRT_AVA_PRS SET EME_T_PDL = '01500144667209', EME_T_NDOSSIER = 'A02QRP3Z'
	WHERE NFT_ID = '282030197'
	;
  
  --Modification table notifs
  SELECT * FROM NOTIF_FIN_TRT
  WHERE NFT_ID = '282030197'
  ;

	--Vidage de la table NOTIF_FIN_TRT (filtres à modifier selon les cas)
	UPDATE C5.NOTIF_FIN_TRT
	SET NFT_B_STATUT_SAF = NULL,
	NFT_B_STATUT_PDM = NULL,
	NFT_T_CODE_ERREUR_PDM = NULL,
	NFT_T_CODE_ERREUR_SAF = NULL,
	NFT_B_STATUT_TUBE = NULL,
	NFT_T_CODE_ERREUR_TUBE = NULL,
	T_IDPDL = '01507525274560'
	WHERE 1=1
	--AND (NFT_B_STATUT_SAF = 'EC' OR NFT_B_STATUT_TUBE = 'EC')
	--AND NFT_D_CREATION > '25/09/15'
	AND NFT_ID = '282030197'
	;
  
	--Insertion unitaire des notifs dans EAI
	INSERT INTO EAI_C5.NOTIF (NFT_ID) VALUES (282030197);
  
  --A lancer dans EAI
	SELECT * FROM NOTIF;
  
----------------------------Insertion des notifs vides dans NOTIF (EAI)-----------------------------
DECLARE

TYPE NOTIF IS TABLE OF EAI_C5.NOTIF.NFT_ID%TYPE;
NOTIF_VAR NOTIF;

BEGIN
  
  SELECT NFT_ID
  BULK COLLECT
  INTO NOTIF_VAR
  FROM C5.NOTIF_FIN_TRT
  WHERE 1=1
  AND NFT_B_STATUT_SAF IS NULL
  AND NFT_B_STATUT_TUBE IS NULL
  ORDER BY 1
  ;

  FOR i IN 1..NOTIF_VAR.COUNT LOOP
    INSERT INTO EAI_C5.NOTIF (NFT_ID) VALUES (NOTIF_VAR(i));
  END LOOP;
  
  COMMIT;

END;

  SELECT * FROM NOTIF;

--Check table routage C03 (EAI_TECH)
SELECT * FROM T_TECH_ROUTAGE_C03
ORDER BY EME_C_CODE
;

--Rajout de logs en SQLPLUS dans les scripts ksh
SPOOL sql_log.log REPLACE
SPOOL OUT

--Lancement manuel de la cinématique de traitements C5
/appli/c5usr/v7.1.0_02/3_UNIX_SCRIPTS/sql/CE12.sql
/appli/c5usr/v7.1.0_02/3_UNIX_SCRIPTS/sql/CE20.sql;
/appli/c5usr/v7.1.0_02/3_UNIX_SCRIPTS/sql/CE20_SUIVI_AC.sql
/appli/c5usr/v7.1.0_02/3_UNIX_SCRIPTS/sql/init_cinematique_$FLUX_C05.sql
/appli/c5usr/v7.1.0_02/3_UNIX_SCRIPTS/sql/pdl_a_traiter.sql
/appli/c5usr/v7.1.0_02/3_UNIX_SCRIPTS/sql/list_groups.sql
/appli/c5usr/v7.1.0_02/3_UNIX_SCRIPTS/sql/cinematique_C5.sql $2 $3

--Notifications associées à des évènements courts et longs.
SELECT eme.EME_T_PDL, eme.NFT_ID FROM C5.EME_CRT_AVA_PRS eme
JOIN C5.NOTIF_FIN_TRT nft ON nft.NFT_ID = eme.NFT_ID
WHERE eme.NFT_ID IN (SELECT NFT_ID FROM C5.EME_LG_AVA_PRS)
AND nft.NFT_T_CODE_ERREUR_SAF = 'SGE-EAI-619'
AND eme.EME_C_PRB = 'PRB_FRAU'
;

--Reprise des notifications C03 KOs
DECLARE

TYPE NOTIF IS TABLE OF EAI_C5.NOTIF.NFT_ID%TYPE;
NOTIF_VAR NOTIF;

BEGIN
  
  SELECT NFT_ID
  BULK COLLECT
  INTO NOTIF_VAR
  FROM C5.NOTIF_FIN_TRT trt1
  WHERE 1=1
  AND TRUNC(trt1.NFT_D_CREATION) = '12/10/2017'
  AND (trt1.NFT_B_STATUT_TUBE = 'KO' OR trt1.NFT_B_STATUT_SAF = 'KO')
  AND NOT EXISTS(
    SELECT trt2.T_IDPDL
    FROM C5.NOTIF_FIN_TRT trt2
    WHERE 1=1
    AND trt2.T_IDPDL = trt1.T_IDPDL
    AND trt2.NFT_B_STATUT_TUBE = 'OK'
    AND TRUNC(trt2.NFT_D_CREATION) > '12/10/2017'
  )
  ;

  FOR i IN 1..NOTIF_VAR.COUNT LOOP
    INSERT INTO EAI_C5.NOTIF (NFT_ID) VALUES (NOTIF_VAR(i));
  END LOOP;
  
  COMMIT;

END;

--Jointure EVT - NOTIFS
SELECT * FROM C5.EME_LG_AVA_PRS lg
JOIN C5.NOTIF_FIN_TRT nft ON nft.NFT_ID = lg.NFT_ID
WHERE 1=1
--AND EME_K_WKF = 'F100B-UH-C5-R01'
AND TRUNC(EME_D_CREATION) = '08/06/2016'
AND EME_C_PRB = 'PRB_EFFA'
AND nft.NFT_B_STATUT_TUBE = 'OK'
;

--AUTOMAC
SELECT * FROM C5.CR_AUT_604A
WHERE EDI_D_CREATION > '14/07/16'
AND CR604A_T_CODERR = 'OK'
;

SELECT COUNT(*), notif.NFT_B_STATUT_SAF
FROM C5.EME_CRT_AVA_PRS evt
JOIN C5.NOTIF_FIN_TRT notif ON notif.NFT_ID = evt.NFT_ID
WHERE 1=1
AND EME_C_CODE = 'CR_DEM_AUT_OK'
AND EME_D_CREATION > '14/07/16'
GROUP BY notif.NFT_B_STATUT_SAF
;